# -*- coding: utf-8 -*-
"""Recurrent Neural Networks - Time Series - Stock Market Data - Several Output.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15UVyPYJxHd1_53fUX2_to1ReyXxlAW4F
"""

!pip install tensorflow==2.16.1

import numpy as np
import pandas as pd
import matplotlib
import tensorflow as tf
import sklearn

np.__version__, pd.__version__, matplotlib.__version__, tf.__version__, sklearn.__version__

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout, LSTM
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau, ModelCheckpoint
from sklearn.metrics import mean_absoute_error
import matplotlib as plt

dataset = pd.read_csv('petr4_treinamentos.csv')
dataset = dataset.dropna()

dataset_train = dataset.iloc[:, 1:2].values
dataset_value_max = dataset.iloc[:, 2:3].values
normalized = MinMaxScaler(feature_range=(0,1))
dataset_train_normalized = normalized.fit_transform(dataset_train)
dataset_value_max_normalized = normalized.fit_transform(dataset_value_max)

normalized_prev = MinMaxScaler(feature_range=(0,1))
normalized_prev.fit_transform(dataset_train[:,0:1])

X = []
y1 = []
y2 = []
for i in range(90, 1242):
   X.append(dataset_train_normalized[i-90:i,0:6])
   y1.append(dataset_train_normalized[i,0])
   y2.append(dataset_value_max_normalized[i,0])
X, y1, y2 = np.array(X), np.array(y1), np.array(y2)
X = np.reshape(X, (X.shape[0], X.shape[1], 1))

y = np.column_stack((y1,y2))

regressor = Sequential()
regressor.add(InputLayer(shape=(X.shape[1],1)))
regressor.add(LSTM(units=100, return_sequences=True))
regressor.add(Dropout(0.3))

regressor.add(LSTM(units=50, return_sequences=True))
regressor.add(Dropout(0.3))

regressor.add(LSTM(units=50, return_sequences=True))
regressor.add(Dropout(0.3))

regressor.add(LSTM(units=50))
regressor.add(Dropout(0.3))

regressor.add(Dense(units=2,activation='linear'))

regressor.compile(optimizer='rmsprop', loss='mean_squared_error', metrics=['mean_absolute_error'])
regressor.fit(X, y, epochs=100, batch_size=32)

#es = EarlyStopping(monitor='loss', min_delta=1e-10, patience=10, verbose=1)
#rlr = ReduceLROnPlateau(monitor='loss', factor=0.2, patience=5, verbose=1)
#mcp = ModelCheckpoint(filepath='pesos.keras', monitor='loss', save_best_only=True, verbose=1)

#regressor.fit(X,y, epochs=100,batch_size=32,callbacks=[es,rlr,mcp])

dataset_test = pd.read_csv('petr4_test.csv')

y_open = dataset_test.iloc[:, 1:2].values
y_high = dataset_test.iloc[:, 2:3].values

dataset_all = pd.concat((dataset['Open'], dataset_test['Open']), axis=0)

input_ = dataset_all[len(dataset_all)-len(dataset_test) - 90:].values
input_ = input_.reshape(-1,1)
input_ = normalized.transform(input_)

X_test = []
for i in range(90, 112)
  X_test.append(input_[i-90:i,0])
X_test = np.array(X_test)
X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1],1))

previ = regressor.predict(X_test)

previ = normalized_previ.inverse_transform(previ)

previ.mean()

y_test.mean()

mean_absolute_error(y_open.ravel(), previ[:,0])
mean_absolute_error(y_high.ravel(), previ[:,1])

plt.plot(y_open, color='red', label='Open')
plt.plot(y_high, color='black', label='High')
plt.plot(previ[:,0], color='blue', label='Previ - Open')
plt.plot(previ[:,1], color='oraneg', label='Previ - High')
plt.title('Previ')
plt.xlabel('Time')
plt.ylabel('Price')
plt.legend()