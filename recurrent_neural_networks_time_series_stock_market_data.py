# -*- coding: utf-8 -*-
"""Recurrent Neural Networks - Time Series - Stock Market Data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12KsgmcaVfolgoWQJ5oRJrewOzswjcoGI
"""

import numpy as np
import pandas as pd
import matplotlib
import tensorflow as tf
import sklearn

np.__version__, pd.__version__, matplotlib.__version__, tf.__version__, sklearn.__version__

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout, LSTM
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_absoute_error
import matplotlib as plt

dataset = pd.read_csv('petr4_treinamentos.csv')

dataset.isnull().sum()

dataset = dataset.dropna()

dataset_train = dataset.iloc[:, 1:2].values

normalized = MinMaxScaler(feature_range=(0,1))
dataset_train_normalized = normalized.fit_transform(dataset_train)

X = []
y = []
for i in range(90, 1242):
   X.append(dataset_train_normalized[i-90:i,0])
   y.append(dataset_train_normalized[i,0])

X, y = np.array(X), np.array(y)

regressor = Sequential()
regressor.add(LSTM(units=100, return_sequences=True, input_shape=(X.shape[1], 1))
regressor.add(Dropout(0.3))

regressor.add(LSTM(units=50, return_sequences=True))
regressor.add(Dropout(0.3))


regressor.add(LSTM(units=50, return_sequences=True))
regressor.add(Dropout(0.3))

regressor.add(LSTM(units=50))
regressor.add(Dropout(0.3))

regressor.add(Dense(units=1,activation='linear'))

regressor.compile(optimizer='rmsprop', loss='mean_squared_error', metrics=['mean_absolute_error'])
regressor.fit(X, y, epochs=100, batch_size=32)

dataset_test = pd.read_csv('petr4_teste.csv')
y_teste = dataset_test.iloc[:, 1:2].values

dataset_all = pd.concat((dataset['Open'], dataset_test['Open']), axis=0)

input_ = dataset_all[len(dataset_all)-len(dataset_test) - 90:].values

input_ = input_.reshape(-1,1)

input_ = normalizer.transform(input_)

X_test = []
for i in range(90, 112)
  X_test.append(input_[i-90:i,0])

X_test = np.array(X_test)
X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))

previ = regressor.prdeict(X_test)
previ = normalized.inverse_transform(previ)

previ.mean()

y_test.mean()

mean_absolute_error(y_test, previ)

plt.plot(y_test, color='red', label='Price')
plt.plot(previ, color='blue', label='Previ')
plt.title('Previ')
plt.xlabel('Time')
plt.ylabel('Price')
plt.legend()